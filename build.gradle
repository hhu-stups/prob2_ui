import org.gradle.plugins.ide.eclipse.model.AccessRule

plugins {
	id "com.github.johnrengelman.shadow" version "5.0.0"
	id "edu.sc.seis.macAppBundle" version "2.3.0"
	// The OpenJFX plugin does not work before Java 11, so we apply it conditionally in an if block further below.
	id "org.openjfx.javafxplugin" version "0.0.8" apply false
}

apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'

project.group = "de.hhu.stups"
project.version = "1.0.1-SNAPSHOT"

if (project != rootProject) {
	throw new GradleException(
		"""\
			The prob2-ui Gradle build cannot be included as a subproject.
			If you are writing a plugin and need to reference the prob2-ui code as a dependency, replace the include statement in your settings.gradle with an includeBuild statement:
			
				includeBuild "${rootProject.relativePath(project.projectDir)}"
			
			And replace the project(":prob2-ui") dependency in your build.gradle with a compileOnly dependency:
			
				dependencies {
					compileOnly group: "${project.group}", name: "${project.name}", version: "${project.version}"
				}
		""".stripIndent()
	)
}

sourceCompatibility="1.8"
targetCompatibility="1.8"

repositories {
	jcenter()
	maven {
		name "sonatype snapshots"
		url "https://oss.sonatype.org/content/repositories/snapshots"
	}
}

// Our actual application class is de.prob2.ui.ProB2.
// See the Javadoc of de.prob2.ui.Main for an explanation of why this extra class is necessary.
mainClassName = "de.prob2.ui.Main"
final preloaderClassName = "de.prob2.ui.ProB2Preloader"
applicationDefaultJvmArgs += [
	"-Xss2M",
]

def systemProperties = [
	"javafx.preloader": preloaderClassName,
]
applicationDefaultJvmArgs += systemProperties.collect {k, v -> "-D${k}=${v}".toString()}

// Module export/open declarations for Java 9+
def exports = []
def opens = []

// Required by centerdevice-nsmenufx (as of version 2.1.6; see https://github.com/codecentric/NSMenuFX/issues/29)
exports += [
	"javafx.controls/com.sun.javafx.scene.control",
	"javafx.graphics/com.sun.glass.ui",
	"javafx.graphics/com.sun.javafx.menu",
	"javafx.graphics/com.sun.javafx.tk",
]
opens += [
	"javafx.graphics/com.sun.glass.ui.mac",
	"javafx.graphics/com.sun.javafx.tk.quantum",
]

// Required by controlsfx, because we are still using the Java 8-compatible version.
// This has been fixed as of ControlsFX 11.0.0 (see https://github.com/controlsfx/controlsfx/issues/1100), but that release is only compatible with Java 11.
exports += [
	"javafx.graphics/com.sun.javafx.css",
]

if (JavaVersion.current().java9Compatible) {
	applicationDefaultJvmArgs += exports.collect {"--add-exports=${it}=ALL-UNNAMED".toString()}
	applicationDefaultJvmArgs += opens.collect {"--add-opens=${it}=ALL-UNNAMED".toString()}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

configurations.all {
	resolutionStrategy.cacheChangingModulesFor(0, 'seconds')
}

dependencies {
	compile group: "com.google.code.gson", name: "gson", version: "2.8.5"
	compile group: "com.googlecode.java-diff-utils", name: "diffutils", version: "1.3.0"
	compile group: "de.codecentric.centerdevice", name: "centerdevice-nsmenufx", version: "2.1.6"
	compile group: "de.hhu.stups", name: "de.prob2.kernel", version: "4.0.0-SNAPSHOT"
	compile group: "org.controlsfx", name: "controlsfx", version: "8.40.15"
	compile group: "org.fxmisc.richtext", name: "richtextfx", version: "0.10.1"
	compile group: "org.fxmisc.wellbehaved", name: "wellbehavedfx", version: "0.3.3"
	compile group: "org.hildan.fxgson", name: "fx-gson", version: "3.1.2"
	compile group: "org.pf4j", name: "pf4j", version: "2.6.0"
	compile group: "se.sawano.java", name: "alphanumeric-comparator", version: "1.4.1"
}

if (JavaVersion.current().java11Compatible) {
	apply plugin: "org.openjfx.javafxplugin"
	javafx {
		version = "11.0.2"
		modules = [
			"javafx.base",
			"javafx.controls",
			"javafx.fxml",
			"javafx.graphics",
			"javafx.swing",
			"javafx.web",
		]
	}
}

eclipse.classpath.file.whenMerged {
	classpath ->
		classpath.entries.findResult { entry ->
			if (entry.kind == 'con' && entry.path.contains('org.eclipse.jdt.launching.JRE_CONTAINER')) {
					entry.accessRules.add(new AccessRule('accessible', 'javafx/**'))
					entry.accessRules.add(new AccessRule('accessible', 'netscape/**'))
			}
		}
}

def readCurrentGitCommit() {
	def proc = ["git", "rev-parse", "HEAD"].execute(null, project.projectDir)
	def exitCode = proc.waitFor()
	if (exitCode != 0) {
		throw new IllegalStateException("git rev-parse command exited with status code ${exitCode}:\n" + proc.err.readLines().join("\n"))
	}
	return proc.in.readLines()[0]
}

processResources {
	filesMatching("de/prob2/ui/build.properties") {
		expand(version: project.version, commit: readCurrentGitCommit())
	}
}

jar {
	manifest {
		attributes([
			"JavaFX-Preloader-Class": preloaderClassName,
			"JavaFX-Application-Class": mainClassName,
			"Add-Exports": exports.join(" "),
			"Add-Opens": opens.join(" "),
		])
	}
}

macAppBundle {
	dmgName = project.name + "-" + project.version + "-mac"
	icon = "src/main/deploy/package/macosx/prob2-ui.icns"
	bundleJRE = false
	jreHome = null
	javaProperties = systemProperties
}

macAppBundle.mainClassName = mainClassName

wrapper {
	gradleVersion = "6.1.1"
	distributionType = Wrapper.DistributionType.ALL
}

final helpScript = "./help.sh"
final helpDir = file("src/main/resources/help")
task createHelp(type: Exec) {
	inputs.file(helpScript)
	inputs.dir(helpDir)
	outputs.dir(helpDir)
	commandLine(helpScript)
}

task cleanHelp(type: Delete) {
	delete(fileTree(dir: helpDir, include: ["**/*.adoc", "**/*.html"]))
}

if (!project.hasProperty("skipHelp") || project.skipHelp != "true") {
	processResources.dependsOn(createHelp)
	clean.dependsOn(cleanHelp)
}

if (project.hasProperty("probHome")) {
	allprojects {
		tasks.withType(JavaForkOptions) {
			delegate.systemProperties["prob.home"] = project.probHome
		}
	}
}
