stages:
  - test
  - deploy

variables:
  DEBIAN_FRONTEND: noninteractive
  GRADLE_OPTIONS: --no-daemon --info --stacktrace --warning-mode=all

.test-linux:
  stage: test
  before_script: &default_before_script_linux
    - apt-get update
    # git is needed to read the current commit hash.
    # pandoc is needed to build the ProB 2 UI docs.
    - apt-get install --assume-yes git pandoc
    - export GRADLE_USER_HOME="${PWD}/.gradle"
  cache:
    paths:
      - .gradle/caches
      - .gradle/native
      - .gradle/wrapper
  artifacts:
    expire_in: 1 week
    paths:
      - build/distributions
      - build/libs

.test-mac:
  stage: test
  before_script: &default_before_script_mac
    - export PATH="/usr/local/jdk/jdk-14.0.2.jdk/Contents/Home/bin:${PATH}"
    - export JAVA_HOME="/usr/local/jdk/jdk-14.0.2.jdk/Contents/Home"
    - export GRADLE_USER_HOME="${PWD}/.gradle"
  cache:
    paths:
      - .gradle/caches
      - .gradle/native
      - .gradle/wrapper
  artifacts:
    expire_in: 1 week
    paths:
      - build/distributions
      - build/libs

.test-windows:
  stage: test
  before_script: &default_before_script_windows
    - SET PATH="C:\Program Files\Java\jdk-14.0.2\bin;%PATH%"
    - SET JAVA_HOME="C:\Program Files\Java\jdk-14.0.2"
    - SET GRADLE_USER_HOME=%cd%\.gradle
  cache:
    paths:
      - .gradle/caches
      - .gradle/native
      - .gradle/wrapper
  artifacts:
    expire_in: 1 week
    paths:
      - build/distributions
      - build/libs

test:jdk-8-linux:
  extends: .test-linux
  image: openjdk:8-jdk-slim
  before_script:
    - *default_before_script_linux
    # curl, perl (provides shasum) and rsync are needed for the OpenJFX installation below.
    - apt-get install --assume-yes curl perl rsync
    # Install OpenJFX 8.
    # This downloads the Debian stretch version of the libopenjfx-java package (which is the last version compatible with Java 8) and installs it into the OpenJDK directory.
    # This is a terrible solution, but there's no better alternative - there are apparently no Docker images that have a (non-Oracle) JDK 8 with JavaFX installed.
    - curl --location -o "libopenjfx-java.deb" "http://security.debian.org/debian-security/pool/updates/main/o/openjfx/libopenjfx-java_8u141-b14-3~deb9u1_all.deb"
    - shasum --algorithm 256 --quiet --check - <<< "716c6ba4c63597d2621025320c894aba6a9cf7059893a1d8a4f6ae45c0c38c46  libopenjfx-java.deb"
    - dpkg-deb --extract "libopenjfx-java.deb" "libopenjfx-java"
    - rsync -a "libopenjfx-java/usr/share/java/openjfx/" "${JAVA_HOME}"
    - rm -r "libopenjfx-java.deb" "libopenjfx-java"
  script: ./gradlew ${GRADLE_OPTIONS} check multiPlatformShadowJar

test:jdk-14-linux:
  extends: .test-linux
  image: openjdk:14-jdk-slim
  before_script:
    - *default_before_script_linux
    - apt-get install --assume-yes build-essential fakeroot
  script:
    - ./gradlew ${GRADLE_OPTIONS} check
    - ./gradlew ${GRADLE_OPTIONS} jpackage

tests:jdk-14-macos:
  extends: .test-mac
  before_script:
    - *default_before_script_mac
  script:
    - ./gradlew ${GRADLE_OPTIONS} check
    - ./gradlew ${GRADLE_OPTIONS} jpackage
  tags:
    - macos

tests:jdk-14-windows64:
  extends: .test-windows
  before_script:
    - *default_before_script_windows
  script:
    - call gradlew %GRADLE_OPTIONS% check
    - call gradlew %GRADLE_OPTIONS% jpackage
  tags:
    - prob
    - win64

distributions:
  stage: deploy
  image: debian:stable-slim
  before_script:
    - apt-get update
    - apt-get install --assume-yes lftp
  variables:
    DEPLOY_REMOTE_BASEDIR: stupshome/stups
  script: LFTP_PASSWORD="${DEPLOY_PASSWORD}" lftp -c "set sftp:auto-confirm yes; open --user ${DEPLOY_USERNAME} --env-password sftp://${DEPLOY_HOST}/${DEPLOY_REMOTE_BASEDIR}/downloads/prob2/; mput -e build/distributions/*-mac.zip build/distributions/*.deb build/distributions/*.dmg build/distributions/*.exe build/libs/*-multi.jar build/libs/*-all.jar; exit"
