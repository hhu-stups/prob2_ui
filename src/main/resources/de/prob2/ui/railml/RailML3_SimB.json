{
    "activations": [
        {
            "id": "$setup_constants",
            "execute": "$setup_constants"
        },
        {
            "id": "$initialise_machine",
            "execute": "$initialise_machine",
            "activating" : ["Any_Action"]
        },
        {
            "id": "Any_Action",
            "chooseActivation": {
                "RS_Action": 0.5,
                "IS_Action": 0.25,
                "IL_Action": 0.25
            }
        },
            {
                "id": "RS_Action",
                "chooseActivation": {
                    "RS_trainArrivalRequest": 0.1,
                    "RS_trainMoveFront": 0.8,
                    "RS_trainChangeState": 0.1
                }
            },
                {
                    "id": "RS_trainArrivalRequest",
                    "chooseActivation": {
                        "RS_trainArrivalRequest_Exec": "IF GET_IS_ENABLED(\"RS_trainArrivalRequest\") = TRUE THEN 1.0 ELSE 0.0 END",
                        "skip": "1.0 - IF GET_IS_ENABLED(\"RS_trainArrivalRequest\") = TRUE THEN 1.0 ELSE 0.0 END"
                    }
                },
                    {
                        "id": "RS_trainArrivalRequest_Exec",
                        "after": 1000,
                        "execute": "RS_trainArrivalRequest",
                        "activating": ["skip", "RS_trainArrivalRequest_Choose"]
                    },
                        {
                            "id": "RS_trainArrivalRequest_Choose",
                            "chooseActivation": {
                                "IL_trainAcceptArrival_Choose": 0.95,
                                "IL_trainDeclineArrival": 0.05
                            }
                        },
                            {
                                "id": "IL_trainAcceptArrival_Choose",
                                "chooseActivation": {
                                    "IL_trainAcceptArrival": "IF RS_requestingArrivalTrains /= {} & #route.(route : allIdsOfType(\"route\") & GET_IS_ENABLED_TRANSITION(FORMAT_TO_STRING(\"IL_startRouteReservation(\\\"~w\\\",\\\"~w\\\")\", [route, TO_STRING(CHOOSE(dom(RS_requestingArrivalTrains)))])) = TRUE) THEN 1.0 ELSE 0.0 END",
                                    "IL_trainAcceptArrival_Exec": "1.0 - IF RS_requestingArrivalTrains /= {} & #route.(route : allIdsOfType(\"route\") & GET_IS_ENABLED_TRANSITION(FORMAT_TO_STRING(\"IL_startRouteReservation(\\\"~w\\\",\\\"~w\\\")\", [route, TO_STRING(CHOOSE(dom(RS_requestingArrivalTrains)))])) = TRUE) THEN 1.0 ELSE 0.0 END"
                                }
                            },
                                {
                                    "id": "IL_trainAcceptArrival",
                                    "after": 1000,
                                    "execute": "IL_startRouteReservation",
                                    "additionalGuards": "RS_requestingArrivalTrains /= {}",
                                    "fixedVariables":{
                                        "Train": "CHOOSE(dom(RS_requestingArrivalTrains))"
                                    },
                                    "activating": ["skip", "IL_startActivateSignalplan", "IL_endRouteReservation"],
                                    "comment": "IL_trainAcceptArrival_Exec activated after end of route reservation"
                                },
                                    {
                                        "id": "IL_trainAcceptArrival_Exec",
                                        "after": 1000,
                                        "execute": "IL_trainAcceptArrival",
                                        "activating": "skip"
                                    },
                            {
                                "id": "IL_trainDeclineArrival",
                                "after": 1000,
                                "execute": "IL_trainDeclineArrival",
                                "activating": "skip"
                            },
                {
                    "id": "RS_trainMoveFront",
                    "chooseActivation":{
                        "RS_trainMoveFront_Exec": "IF GET_IS_ENABLED(\"RS_trainMoveFront\") = TRUE THEN 1.0 ELSE 0.0 END",
                        "skip": "1.0 - IF GET_IS_ENABLED(\"RS_trainMoveFront\") = TRUE THEN 1.0 ELSE 0.0 END"
                    }
                },
                    {
                        "id": "RS_trainMoveFront_Exec",
                        "execute": "RS_trainMoveFront",
                        "after": 1000,
                        "activating" : ["skip", "RS_trainMoveBack"]
                    },
                        {
                            "id": "RS_trainMoveBack",
                            "after": 1000,
                            "execute": "RS_trainMoveBack",
                            "activating" : ["skip", "RS_trainLeave", "IL_ReleaseAction"]
                        },
                            {
                                "id": "RS_trainLeave",
                                "after": 1000,
                                "execute": "RS_trainLeave",
                                "activating": "skip"
                            },
                {
                    "id": "RS_trainChangeState",
                    "chooseActivation":{
                        "RS_trainChangeState_Exec": "IF dom({ Train, tvd | Train : RS_arrivedTrains & tvd : RailML3_IL_TVD_SECTIONS & {RS_trainBack(Train), RS_trainFront(Train)} <: dom(prj2(tvd)) \\/ ran(prj2(tvd)) & (RailML3_IL_TVD_SECTION_BERTHING_TRACKS(prj1(tvd)) = TRUE or RS_train_states(Train) = train_standing) & GET_IS_ENABLED_TRANSITION(FORMAT_TO_STRING(\"RS_trainChangeState(~w)\", [Train])) = TRUE }) /= {} THEN 1.0 ELSE 0.0 END",
                        "skip": "1.0 - IF dom({ Train, tvd | Train : RS_arrivedTrains & tvd : RailML3_IL_TVD_SECTIONS & {RS_trainBack(Train), RS_trainFront(Train)} <: dom(prj2(tvd)) \\/ ran(prj2(tvd)) & (RailML3_IL_TVD_SECTION_BERTHING_TRACKS(prj1(tvd)) = TRUE or RS_train_states(Train) = train_standing) & GET_IS_ENABLED_TRANSITION(FORMAT_TO_STRING(\"RS_trainChangeState(~w)\", [Train])) = TRUE }) /= {} THEN 1.0 ELSE 0.0 END"
                    },
                    "comment": "dom({ Train, tvd | Train : RS_arrivedTrains & tvd : RailML3_IL_TVD_SECTIONS & {RS_trainBack(Train), RS_trainFront(Train)} <: dom(prj2(tvd)) \\/ ran(prj2(tvd)) & (RailML3_IL_TVD_SECTION_BERTHING_TRACKS(prj1(tvd)) = TRUE or RS_train_states(Train) = train_standing) & GET_IS_ENABLED_TRANSITION(FORMAT_TO_STRING(\"RS_trainChangeState(~w)\", [Train])) = TRUE }) /= {}",
                    "comment2": "IF { Train | Train : RS_arrivedTrains & prj1(prj1(RS_trainBack(Train))) = prj1(prj1(RS_trainFront(Train))) & GET_IS_ENABLED_TRANSITION(FORMAT_TO_STRING(\"RS_trainChangeState(~w)\", [Train])) = TRUE } /= {} THEN 1.0 ELSE 0.0 END"
                },
                    {
                        "id": "RS_trainChangeState_Exec",
                        "after": 1000,
                        "execute": "RS_trainChangeState",
                        "additionalGuards": "dom({ Train, tvd | Train : RS_arrivedTrains & tvd : RailML3_IL_TVD_SECTIONS & {RS_trainBack(Train), RS_trainFront(Train)} <: dom(prj2(tvd)) \\/ ran(prj2(tvd)) & (RailML3_IL_TVD_SECTION_BERTHING_TRACKS(prj1(tvd)) = TRUE or RS_train_states(Train) = train_standing) & GET_IS_ENABLED_TRANSITION(FORMAT_TO_STRING(\"RS_trainChangeState(~w)\", [Train])) = TRUE }) /= {}",
                        "fixedVariables": {
                            "Train": "CHOOSE(dom({ Train, tvd | Train : RS_arrivedTrains & tvd : RailML3_IL_TVD_SECTIONS & {RS_trainBack(Train), RS_trainFront(Train)} <: dom(prj2(tvd)) \\/ ran(prj2(tvd)) & (RailML3_IL_TVD_SECTION_BERTHING_TRACKS(prj1(tvd)) = TRUE or RS_train_states(Train) = train_standing) & GET_IS_ENABLED_TRANSITION(FORMAT_TO_STRING(\"RS_trainChangeState(~w)\", [Train])) = TRUE }))"
                        },
                        "activating": ["skip", "RS_trainChangeDirection"],
                        "activationKind": "single"
                    },
                        {
                            "id": "RS_trainChangeDirection",
                            "after": 1000,
                            "execute": "RS_trainChangeDirection",
                            "activating": "skip"
                        },

            {
                "id": "IS_Action",
                "chooseActivation": {
                    "IS_startChangeCrossing": 0.25,
                    "IS_startChangeDerailer": 0.25,
                    "IS_startChangeSwitch": 0.5
                },
                "comment": "TODO: IS_startChangeCoupledSwitches"
            },
            {
                "id": "IS_startChangeCrossing",
                    "chooseActivation": {
                        "IS_startChangeCrossing_Exec": "IF {CrossingId, train | train : RS_arrivedTrains & RS_trainFront(train) : dom(RailML3_IS_CROSSING_BRANCHES(CrossingId)) or #route.(route : dom(IL_routes_in_res) /\\ dom(RailML3_IL_ROUTE_CROSSING_POSITIONS) & CrossingId : dom(RailML3_IL_ROUTE_CROSSING_POSITIONS(route)) & IS_crossing_states(CrossingId) /= RailML3_IL_ROUTE_CROSSING_POSITIONS(route)(CrossingId)) } /= {} THEN 1.0 ELSE 0.0 END",
                        "skip": "1.0 - IF {CrossingId, train | train : RS_arrivedTrains & RS_trainFront(train) : dom(RailML3_IS_CROSSING_BRANCHES(CrossingId)) or #route.(route : dom(IL_routes_in_res) /\\ dom(RailML3_IL_ROUTE_CROSSING_POSITIONS) & CrossingId : dom(RailML3_IL_ROUTE_CROSSING_POSITIONS(route)) & IS_crossing_states(CrossingId) /= RailML3_IL_ROUTE_CROSSING_POSITIONS(route)(CrossingId)) } /= {} THEN 1.0 ELSE 0.0 END"
                    }
                },
                    {
                        "id": "IS_startChangeCrossing_Exec",
                        "execute": "IS_startChangeCrossing",
                        "after": 1000,
                        "additionalGuards": "{CrossingId, train | train : RS_arrivedTrains & RS_trainFront(train) : dom(RailML3_IS_CROSSING_BRANCHES(CrossingId)) or #route.(route : dom(IL_routes_in_res) /\\ dom(RailML3_IL_ROUTE_CROSSING_POSITIONS) & CrossingId : dom(RailML3_IL_ROUTE_CROSSING_POSITIONS(route)) & IS_crossing_states(CrossingId) /= RailML3_IL_ROUTE_CROSSING_POSITIONS(route)(CrossingId)) } /= {}",
                        "fixedVariables":{
                            "CrossingId": "CHOOSE(dom({CrossingId, train | train : RS_arrivedTrains & RS_trainFront(train) : dom(RailML3_IS_CROSSING_BRANCHES(CrossingId)) or #route.(route : dom(IL_routes_in_res) /\\ dom(RailML3_IL_ROUTE_CROSSING_POSITIONS) & CrossingId : dom(RailML3_IL_ROUTE_CROSSING_POSITIONS(route)) & IS_crossing_states(CrossingId) /= RailML3_IL_ROUTE_CROSSING_POSITIONS(route)(CrossingId)) }))"
                        },
                        "activating" : ["skip", "IS_endChangeCrossing"]
                    },
                        {
                            "id": "IS_endChangeCrossing",
                            "execute": "IS_endChangeCrossing",
                            "after": "RailML3_IL_MOVABLE_CROSSING_TYPICAL_THROW_TIMES(CrossingId)",
                            "activating": ["skip", "IL_noteChangeSignalState", "IL_endRouteReservation"]
                        },
                {
                    "id": "IS_startChangeDerailer",
                    "chooseActivation": {
                        "IS_startChangeDerailer_Exec": "IF {DerailerId, train | train : RS_arrivedTrains & RS_trainFront(train) : dom(RailML3_IS_DERAILER_NOT_PASSABLE(DerailerId)) or #route.(route : dom(IL_routes_in_res) /\\ dom(RailML3_IL_ROUTE_DERAILERS) & DerailerId : RailML3_IL_ROUTE_DERAILERS(route) ) } /= {} THEN 1.0 ELSE 0.0 END",
                        "skip": "1.0 - IF {DerailerId, train | train : RS_arrivedTrains & RS_trainFront(train) : dom(RailML3_IS_DERAILER_NOT_PASSABLE(DerailerId)) or #route.(route : dom(IL_routes_in_res) /\\ dom(RailML3_IL_ROUTE_DERAILERS) & DerailerId : RailML3_IL_ROUTE_DERAILERS(route) ) } /= {} THEN 1.0 ELSE 0.0 END"
                    }
                },
                    {
                        "id": "IS_startChangeDerailer_Exec",
                        "execute": "IS_startChangeDerailer",
                        "after": 1000,
                        "fixedVariables":{
                            "DerailerId": "CHOOSE(dom({DerailerId, train | train : RS_arrivedTrains & RS_trainFront(train) : dom(RailML3_IS_DERAILER_NOT_PASSABLE(DerailerId)) or #route.(route : dom(IL_routes_in_res) /\\ dom(RailML3_IL_ROUTE_DERAILERS) & DerailerId : RailML3_IL_ROUTE_DERAILERS(route) ) }))"
                        },
                        "activating" : ["skip", "IS_endChangeDerailer"]
                    },
                        {
                            "id": "IS_endChangeDerailer",
                            "execute": "IS_endChangeDerailer",
                            "after": "RailML3_IL_DERAILER_TYPICAL_THROW_TIMES(DerailerId)",
                            "activating": ["skip", "IL_noteChangeSignalState", "IL_endRouteReservation"]
                        },
                    
                {
                    "id": "IS_startChangeSwitch",
                    "chooseActivation": {
                        "IS_startChangeSwitch_Exec": "IF {SwitchId, train | train : RS_arrivedTrains & #(CurrState,DestState).(CurrState = IS_switch_states(SwitchId) & DestState : dom(RailML3_IL_SWITCH_BRANCHES(SwitchId)) & CurrState /= DestState & GET_IS_ENABLED_TRANSITION(FORMAT_TO_STRING(\"IS_startChangeSwitch(\\\"~w\\\",~w,~w)\",[SwitchId, TO_STRING(CurrState), TO_STRING(DestState)])) = TRUE) & ( RS_trainFront(train) : dom(RailML3_IS_SWITCH_BRANCHES(SwitchId)) or #route.(route : dom(IL_routes_in_res) /\\ dom(RailML3_IL_ROUTE_SWITCH_POSITIONS) & SwitchId : dom(RailML3_IL_ROUTE_SWITCH_POSITIONS(route)) & IS_switch_states(SwitchId) /= RailML3_IL_ROUTE_SWITCH_POSITIONS(route)(SwitchId) ) or #SignalId.(SignalId : { i_sig | i_sig : allIdsOfType(\"signalIS\") & RS_trainFront(train) : RailML3_IS_SPOT_LOCATIONS(i_sig) } \\/ (IL_signal_locked - dom(IL_noted_signal_states)) & union(ran(RailML3_IL_SIGNAL_CONTROL_SECTIONS(SignalId))) /\\ RailML3_IS_SWITCH_BRANCHES(SwitchId) /= {}) ) } /= {} THEN 1.0 ELSE 0.0 END",
                        "skip": "1.0 - IF {SwitchId, train | train : RS_arrivedTrains & #(CurrState,DestState).(CurrState = IS_switch_states(SwitchId) & DestState : dom(RailML3_IL_SWITCH_BRANCHES(SwitchId)) & CurrState /= DestState & GET_IS_ENABLED_TRANSITION(FORMAT_TO_STRING(\"IS_startChangeSwitch(\\\"~w\\\",~w,~w)\",[SwitchId, TO_STRING(CurrState), TO_STRING(DestState)])) = TRUE) & ( RS_trainFront(train) : dom(RailML3_IS_SWITCH_BRANCHES(SwitchId)) or #route.(route : dom(IL_routes_in_res) /\\ dom(RailML3_IL_ROUTE_SWITCH_POSITIONS) & SwitchId : dom(RailML3_IL_ROUTE_SWITCH_POSITIONS(route)) & IS_switch_states(SwitchId) /= RailML3_IL_ROUTE_SWITCH_POSITIONS(route)(SwitchId) ) or #SignalId.(SignalId : { i_sig | i_sig : allIdsOfType(\"signalIS\") & RS_trainFront(train) : RailML3_IS_SPOT_LOCATIONS(i_sig) } \\/ (IL_signal_locked - dom(IL_noted_signal_states)) & union(ran(RailML3_IL_SIGNAL_CONTROL_SECTIONS(SignalId))) /\\ RailML3_IS_SWITCH_BRANCHES(SwitchId) /= {}) ) } /= {} THEN 1.0 ELSE 0.0 END"
                    }
                },
                    {
                        "id": "IS_startChangeSwitch_Exec",
                        "execute": "IS_startChangeSwitch",
                        "after": 1000,
                        "additionalGuards": "{SwitchId, train | train : RS_arrivedTrains & #(CurrState,DestState).(CurrState = IS_switch_states(SwitchId) & DestState : dom(RailML3_IL_SWITCH_BRANCHES(SwitchId)) & CurrState /= DestState & GET_IS_ENABLED_TRANSITION(FORMAT_TO_STRING(\"IS_startChangeSwitch(\\\"~w\\\",~w,~w)\",[SwitchId, TO_STRING(CurrState), TO_STRING(DestState)])) = TRUE) & ( RS_trainFront(train) : dom(RailML3_IS_SWITCH_BRANCHES(SwitchId)) or #route.(route : dom(IL_routes_in_res) /\\ dom(RailML3_IL_ROUTE_SWITCH_POSITIONS) & SwitchId : dom(RailML3_IL_ROUTE_SWITCH_POSITIONS(route)) & IS_switch_states(SwitchId) /= RailML3_IL_ROUTE_SWITCH_POSITIONS(route)(SwitchId) ) or #SignalId.(SignalId : { i_sig | i_sig : allIdsOfType(\"signalIS\") & RS_trainFront(train) : RailML3_IS_SPOT_LOCATIONS(i_sig) } \\/ (IL_signal_locked - dom(IL_noted_signal_states)) & union(ran(RailML3_IL_SIGNAL_CONTROL_SECTIONS(SignalId))) /\\ RailML3_IS_SWITCH_BRANCHES(SwitchId) /= {}) ) } /= {}",
                        "fixedVariables":{
                            "SwitchId": "CHOOSE(dom({SwitchId, train | train : RS_arrivedTrains & #(CurrState,DestState).(CurrState = IS_switch_states(SwitchId) & DestState : dom(RailML3_IL_SWITCH_BRANCHES(SwitchId)) & CurrState /= DestState & GET_IS_ENABLED_TRANSITION(FORMAT_TO_STRING(\"IS_startChangeSwitch(\\\"~w\\\",~w,~w)\",[SwitchId, TO_STRING(CurrState), TO_STRING(DestState)])) = TRUE) & ( RS_trainFront(train) : dom(RailML3_IS_SWITCH_BRANCHES(SwitchId)) or #route.(route : dom(IL_routes_in_res) /\\ dom(RailML3_IL_ROUTE_SWITCH_POSITIONS) & SwitchId : dom(RailML3_IL_ROUTE_SWITCH_POSITIONS(route)) & IS_switch_states(SwitchId) /= RailML3_IL_ROUTE_SWITCH_POSITIONS(route)(SwitchId) ) or #SignalId.(SignalId : { i_sig | i_sig : allIdsOfType(\"signalIS\") & RS_trainFront(train) : RailML3_IS_SPOT_LOCATIONS(i_sig) } \\/ (IL_signal_locked - dom(IL_noted_signal_states)) & union(ran(RailML3_IL_SIGNAL_CONTROL_SECTIONS(SignalId))) /\\ RailML3_IS_SWITCH_BRANCHES(SwitchId) /= {}) ) }))"
                        },
                        "activating" : ["skip", "IS_endChangeSwitch"]
                    },
                        {
                            "id": "IS_endChangeSwitch",
                            "execute": "IS_endChangeSwitch",
                            "after": "RailML3_IL_SWITCH_TYPICAL_THROW_TIMES(SwitchId)",
                            "activating": ["skip", "IS_endChangeSwitch_RelatedMovableElement_Choose", "IL_noteChangeSignalState", "IL_endRouteReservation"]
                        },
                            {
                                "id": "IS_endChangeSwitch_RelatedMovableElement",
                                "execute": "IS_endChangeSwitch",
                                "additionalGuards": "SwitchId : dom(RailML3_IL_SWITCH_RELATED_MOVABLE_ELEMENT)",
                                "after": "RailML3_IL_SWITCH_TYPICAL_THROW_TIMES(RailML3_IL_SWITCH_RELATED_MOVABLE_ELEMENT(SwitchId))",
                                "fixedVariables": {"SwitchId": "RailML3_IL_SWITCH_RELATED_MOVABLE_ELEMENT(SwitchId)"},
                                "activating": ["skip", "IL_noteChangeSignalState", "IL_endRouteReservation"]
                            },

            {
                "id": "IL_Action",
                "chooseActivation": {
                    "IL_startRouteReservation_Choose": 0.34,
                    "IL_startActivateSignalplan_Choose": 0.33,
                    "IL_changeSignalState": 0.33
                }
            },
                {
                    "id": "IL_startRouteReservation_Choose",
                    "chooseActivation":{
                        "IL_startRouteReservation": "IF GET_IS_ENABLED(\"IL_startRouteReservation\") = TRUE THEN 1.0 ELSE 0.0 END",
                        "skip": "1.0 - IF GET_IS_ENABLED(\"IL_startRouteReservation\") = TRUE THEN 1.0 ELSE 0.0 END"
                    }
                },
                    {
                        "id": "IL_startRouteReservation",
                        "execute": "IL_startRouteReservation",
                        "after": 1000,
                        "activating" : ["skip", "IS_Action", "IL_startActivateSignalplan_Choose", "IL_endRouteReservation"]
                    },
                {
                    "id": "IL_startActivateSignalplan_Choose",
                    "chooseActivation":{
                        "IL_startActivateSignalplan": "IF GET_IS_ENABLED(\"IL_startActivateSignalplan\") = TRUE THEN 1.0 ELSE 0.0 END",
                        "skip": "1.0 - IF GET_IS_ENABLED(\"IL_startActivateSignalplan\") = TRUE THEN 1.0 ELSE 0.0 END"
                    }
                },
                    {
                        "id": "IL_startActivateSignalplan",
                        "execute": "IL_startActivateSignalplan",
                        "after": 1000,
                        "activating" : ["skip", "IL_noteChangeSignalState"]
                    },
                        {
                            "id": "IL_noteChangeSignalState",
                            "execute": "IL_noteChangeSignalState",
                            "after": 1000,
                            "additionalGuards": "{SignalId, sp | sp : IL_signalplan_in_activation & SignalId : RailML3_IL_SIGNAL_REFERS_TO[dom(sp'master \\/ sp'slave \\/ sp'distant)] - dom(IL_noted_signal_states) & GET_IS_ENABLED_TRANSITION(FORMAT_TO_STRING(\"IL_noteChangeSignalState(\\\"~w\\\")\", [SignalId])) = TRUE } /= {}",
                            "fixedVariables":{
                                "SignalId": "CHOOSE(dom({SignalId, sp | sp : IL_signalplan_in_activation & SignalId : RailML3_IL_SIGNAL_REFERS_TO[dom(sp'master \\/ sp'slave \\/ sp'distant)] - dom(IL_noted_signal_states) & GET_IS_ENABLED_TRANSITION(FORMAT_TO_STRING(\"IL_noteChangeSignalState(\\\"~w\\\")\", [SignalId])) = TRUE }))"
                            },
                            "activating" : ["skip", "IL_startRouteReservation", "IS_Action", "IL_noteChangeSignalState", "IL_endRouteReservation", "IL_endActivateSignalplan"]
                        },
                    {
                        "id": "IL_endRouteReservation",
                        "execute": "IL_endRouteReservation",
                        "after": 1000,
                        "activating" : ["skip", "IL_endActivateSignalplan", "IL_trainAcceptArrival_Exec"]
                    },
                    {
                        "id": "IL_endActivateSignalplan",
                        "execute": "IL_endActivateSignalplan",
                        "after": 1000,
                        "activating": "skip"
                    },
                {
                    "id": "IL_changeSignalState",
                    "chooseActivation": {
                        "IL_changeSignalState_Exec": "IF {SignalId, train | train : RS_arrivedTrains & SignalId : { i_sig | i_sig : allIdsOfType(\"signalIS\") & RS_trainFront(train) : RailML3_IS_SPOT_LOCATIONS(i_sig) } \\/ (IL_signal_locked - dom(IL_noted_signal_states)) } /= {} THEN 1.0 ELSE 0.0 END",
                        "skip": "1.0 - IF {SignalId, train | train : RS_arrivedTrains & SignalId : { i_sig | i_sig : allIdsOfType(\"signalIS\") & RS_trainFront(train) : RailML3_IS_SPOT_LOCATIONS(i_sig) } \\/ (IL_signal_locked - dom(IL_noted_signal_states)) } /= {} THEN 1.0 ELSE 0.0 END"
                    }
                },
                    {
                        "id": "IL_changeSignalState_Exec",
                        "execute": "IL_changeSignalState",
                        "after": 1000,
                        "additionalGuards": "{SignalId, train | train : RS_arrivedTrains & SignalId : { i_sig | i_sig : allIdsOfType(\"signalIS\") & RS_trainFront(train) : RailML3_IS_SPOT_LOCATIONS(i_sig) } \\/ (IL_signal_locked - dom(IL_noted_signal_states)) } /= {}",
                        "fixedVariables":{
                            "SignalId": "CHOOSE(dom({SignalId, train | train : RS_arrivedTrains & SignalId : { i_sig | i_sig : allIdsOfType(\"signalIS\") & RS_trainFront(train) : RailML3_IS_SPOT_LOCATIONS(i_sig) } \\/ (IL_signal_locked - dom(IL_noted_signal_states)) }))"
                        },
                        "activating": ["skip"]
                    },
        {
            "id": "IL_ReleaseAction",
            "chooseActivation": {
                "IL_partialRouteReleaseAhead": 0.1,
                "IL_partialRouteReleaseRear": 0.3,
                "IL_completeRouteReleaseAhead": 0.1,
                "IL_completeRouteReleaseRear": 0.3,
                "IL_startOverlapRelease": 0.2
            }
        },
            {
                "id": "IL_partialRouteReleaseAhead",
                "execute": "IL_partialRouteReleaseAhead",
                "after": 1000,
                "activating" : ["skip", "IL_partialRouteReleaseAhead", "IL_completeRouteReleaseAhead"]
            },
            {
                "id": "IL_partialRouteReleaseRear",
                "execute": "IL_partialRouteReleaseRear",
                "after": 1000,
                "activating" : ["skip", "IL_partialRouteReleaseRear", "IL_completeRouteReleaseRear"]
            },
            {
                "id": "IL_completeRouteReleaseAhead",
                "execute": "IL_completeRouteReleaseAhead",
                "after": 1000,
                "activating" : ["skip"]
            },
            {
                "id": "IL_completeRouteReleaseRear",
                "execute": "IL_completeRouteReleaseRear",
                "after": 1000,
                "activating" : ["skip"]
            },
            {
                "id": "IL_startOverlapRelease",
                "execute": "IL_startOverlapRelease",
                "after": 1000,
                "activating" : ["skip", "IL_endOverlapRelease"]
            },
            {
                "id": "IL_endOverlapRelease",
                "execute": "IL_endOverlapRelease",
                "after": "RailML3_IL_OVERLAP_RELEASE_TIMERS(OverlapId)",
                "activating" : ["skip"]
            },
        {
            "id": "skip",
            "execute": "skip",
            "activating": ["Any_Action"]
        }
    ],
    "listeners" : [
        {
            "id": "IS_changeSwitch",
            "event": "IS_startChangeSwitch",
            "activating": ["IS_endChangeSwitch"]
        },
        {
            "id": "RS_moveTrain",
            "event": "RS_trainMoveFront",
            "activating": ["RS_trainMoveBack"]
        }
    ]
}