/*
RailML3 Visualization Rules
------------------------------
Reads RailML3 visualization from XML "data" in "RailML_readFile.rmch" and creates a new set per element type by a computation.
The type of the set is specific for each element type. Types are specified in "RailML3_VIS_Types.def".
Childs with finite cardinality (e.g. (0..1), (1..1) or (0..2)) or properties which can be listed easily (e.g. string refs in a set (0..*))
are included in their parent; others stored as types separatly.
Necessary rules that must hold for valid RailML data are checked on this sets. They only check the pure railML schematic rules;
specific constraints for B are validated in RailML_validation.mch.
Sets for animation are created after successful validation of the data.

The general procedure for each element type is:
    - Computation "set_xyz":
        Search data for all elements of type "xyz" -> Compute RailML_xyz of B-type RailML3_IS_xyz_Type to guarantee correct types of attributes
    - Rule is_valid_xyz:
        Validation of the correct cardinality of the elements themselves and of the attributes
        Validate whether the element xyz has the correct parent element; if successful, xyz is fully validated
    - Rule warnings_xyz
        When a default value was set for a not available attribute and the default value is not part of the railML schema a warning should be prompted
    - Computation(s) set_IS_XYZ(_IDS):
        Convert selected data into a structure that is used for animation.
*/
RULES_MACHINE RailML3_VIS
REFERENCES RailML3_readFile, RailML3_IS, RailML3_CO
SETS
    RailML3_VIS_GENERIC_TYPES = {visualizations, infrastructureVisualizations};

    // Attribute Types:
    RailML3_VIS_ORIENTATION = {orientation_down, orientation_left, orientation_right, orientation_up}
DEFINITIONS
    "CHOOSE.def";
    "LibraryStrings.def";
    "RailML3_CO_Types.def";
    "RailML3_VIS_Types.def";

    inverseDirectedPair(Pair) == prj1(Pair) |-> oppositeDirection(prj2(Pair));
    oppositeDirection(dir) == IF dir = direction_normal THEN direction_reverse ELSE direction_normal END;
    elementOfId(Set, eId) == MU( { e | e : Set & eId = MU(e'Id)} );

    genericVISType(TypeAsString) == 
        dom({e, e_g | e_g : elementsOfType(TypeAsString)
                    & e = rec(
                            recId:e_g'recId,
                            pId:e_g'pId,
                            xmlLineNumber:STRING_TO_INT(e_g'meta("xmlLineNumber")),
                            type:TYPED_STRING_TO_ENUM(RailML3_VIS_GENERIC_TYPES, TypeAsString)
                        ) });

    errorCard(TypeAsString, Set, MinNr, MaxNr, ActualNr) == 
        STRING_FORMAT("[Lines ~w]: expected min. ~w and max. ~w elements of type '"^TypeAsString^"', but were ~w", dom({ nr, e | e : Set & nr = e'xmlLineNumber }), MinNr, MaxNr, ActualNr);
    errorCardOnlyLowerBound(TypeAsString, Set, MinNr, ActualNr) == 
        STRING_FORMAT("[Lines ~w]: expected min. ~w elements of type '"^TypeAsString^"', but were ~w", dom({ nr, e | e : Set & nr = e'xmlLineNumber }), MinNr, ActualNr);
    errorAttribute(AttrNameAsString, TypeAsString, lineNr) ==
        STRING_FORMAT("[Line ~w]: expected obligatory attribute '"^AttrNameAsString^"' for element '"^TypeAsString^"' is missing", lineNr);
    errorParent(TypeAsString, ParentTypeAsString, lineNr) == 
        STRING_FORMAT("[Line ~w]: expected parent of type '"^ParentTypeAsString^"' for type '"^TypeAsString^"'", lineNr);
    errorParentMultipleTypes(TypeAsString, SetOfParentTypesAsString, lineNr) == 
        STRING_FORMAT("[Line ~w]: expected parent of types '~w' for type '"^TypeAsString^"'", lineNr, SetOfParentTypesAsString);
    errorType(ElementTypeAsString, ExpectedTypeAsString, ActualElementAsString, lineNr) == 
        STRING_FORMAT("[Line ~w]: expected '"^ElementTypeAsString^"' of type '"^ExpectedTypeAsString^"', but was '"^ActualElementAsString^"'", lineNr)
OPERATIONS
    COMPUTATION set_visualizations
    DEPENDS_ON_COMPUTATION read_file
    BODY
        DEFINE RailML_visualizations
            TYPE FIN(RailML3_VIS_generic_Type)
            VALUE genericVISType("visualizations")
        END
    END;
    RULE is_valid_visualizations
    DEPENDS_ON_COMPUTATION set_visualizations
    BODY
        RULE_FAIL c
            WHEN c = card(RailML_visualizations) & c /: 0..1
        COUNTEREXAMPLE 
            errorCard("visualizations", RailML_visualizations, 0, 1, c)
        END;
        RULE_FAIL e
            WHEN e : RailML_visualizations & e'pId /= 1
        COUNTEREXAMPLE 
            errorParent("visualizations", "railML", e'xmlLineNumber)
        END
    END;

    COMPUTATION set_infrastructureVisualizations
    DEPENDS_ON_RULE is_valid_visualizations
    BODY
        DEFINE RailML_infrastructureVisualizations
            TYPE FIN(RailML3_VIS_generic_Type)
            VALUE genericVISType("infrastructureVisualizations")
        END
    END;
    RULE is_valid_infrastructureVisualizations
    DEPENDS_ON_COMPUTATION set_infrastructureVisualizations, set_infrastructure
    BODY
        RULE_FAIL c
        WHEN 
            c = card(RailML_infrastructureVisualizations)
            & IF version = {v3_2} 
                THEN 
                    IF card(RailML_visualizations) = 1 
                        THEN c > 1
                        ELSE c /= 0
                    END
                ELSE
                    IF card(RailML3_infrastructure) = 1 
                        THEN c > 1
                        ELSE c /= 0
                    END
            END // 3.2: (0..1), 0 if no visualizations; 3.1: (0..1), 0 if no infrastructure
        COUNTEREXAMPLE 
            IF version = {v3_2}
                THEN errorCard("infrastructureVisualizations", RailML_infrastructureVisualizations, 0, card(RailML_infrastructureVisualizations), c)
            ELSE
                errorCard("infrastructureVisualizations", RailML_infrastructureVisualizations, 0, card(RailML3_infrastructure), c)
            END
        END;
        RULE_FORALL e
            WHERE e : RailML_infrastructureVisualizations & IF version = {v3_2} THEN card(RailML_visualizations) = 1 ELSE card(RailML3_infrastructure) = 1 END
            EXPECT IF version = {v3_2} THEN e'pId = MU_WD(RailML_visualizations)'recId ELSE e'pId = MU_WD(RailML3_infrastructure)'recId END
        COUNTEREXAMPLE 
            errorParent("infrastructureVisualizations", IF version = {v3_2} THEN "visualizations" ELSE "infrastructure" END, e'xmlLineNumber)
        END
    END;

    COMPUTATION set_infrastructureVisualization
    DEPENDS_ON_RULE is_valid_infrastructureVisualizations
    BODY
        DEFINE RailML_infrastructureVisualization
            TYPE FIN(RailML3_VIS_infrastructureVisualization_Type)
            VALUE dom({e, e_vis | e_vis : ran(data) & e_vis'element = IF version = {v3_2} THEN "infrastructureVisualization" ELSE "visualization" END
                & e = rec(
                        recId: e_vis'recId, 
                        pId: e_vis'pId,
                        xmlLineNumber: STRING_TO_INT(e_vis'meta("xmlLineNumber")),
                        Id: e_vis'attributes[{"id"}],
                        positioningSystemRef: e_vis'attributes[{"positioningSystemRef"}]
                ) })
        END
    END;
    RULE is_valid_infrastructureVisualization
    DEPENDS_ON_COMPUTATION set_infrastructureVisualization
    BODY
        RULE_FAIL c
        WHEN 
            c = card(RailML_infrastructureVisualization)
            & IF card(RailML_infrastructureVisualizations) = 1 THEN c < 1 ELSE c /= 0 END // (1..*), 0 if no infrastructureVisualizations
        COUNTEREXAMPLE 
            IF version = {v3_2}
                THEN errorCard("infrastructureVisualization", RailML_infrastructureVisualization, 0, card(RailML_infrastructureVisualizations), c)
            ELSE
                errorCard("visualization", RailML_infrastructureVisualization, 0, card(RailML_infrastructureVisualizations), c)
            END
        END;
        RULE_FAIL e
        WHEN e : RailML_infrastructureVisualization & (card(e'Id) /= 1 or (card(e'Id) = 1 & MU_WD(e'Id) = ""))
        COUNTEREXAMPLE
            errorAttribute("id", "infrastructureVisualization", e'xmlLineNumber)
        END;
        RULE_FORALL e
            WHERE e : RailML_infrastructureVisualization & card(RailML_infrastructureVisualizations) = 1
            EXPECT e'pId = MU_WD(RailML_infrastructureVisualizations)'recId
        COUNTEREXAMPLE 
            errorParent("infrastructureVisualization", "infrastructureVisualizations", e'xmlLineNumber)
        END
    END;

    COMPUTATION set_spotElementProjection
    DEPENDS_ON_RULE is_valid_infrastructureVisualization
    BODY
        DEFINE RailML_spotElementProjection
            TYPE FIN(RailML3_VIS_spotElementProjection_Type)
            VALUE dom({e, e_vis | e_vis : elementsOfType("spotElementProjection")
                & e = rec(
                        recId: e_vis'recId, 
                        pId: e_vis'pId,
                        Id: e_vis'attributes[{"id"}],
                        xmlLineNumber: STRING_TO_INT(e_vis'meta("xmlLineNumber")),
                        refersToElement: e_vis'attributes[{"refersToElement"}],
                        coordinate: 
                            dom({ a, c | c : childsOfElementType( "coordinate", e_vis'recId)
                                & a = rec(
                                    recId: c'recId, 
                                    pId: c'pId,
                                    xmlLineNumber: STRING_TO_INT(c'meta("xmlLineNumber")),
                                    x: c'attributes[{"x"}],
                                    y: IF "y" : dom(c'attributes) THEN c'attributes[{"y"}] ELSE {"0.0"} END,
                                    z: IF "z" : dom(c'attributes) THEN c'attributes[{"z"}] ELSE {"0.0"} END
                            )})
                ) })
        END
    END;
    RULE is_valid_spotElementProjection
    DEPENDS_ON_COMPUTATION set_spotElementProjection
    BODY
        RULE_FAIL e
            WHEN e : RailML_spotElementProjection & (card(e'Id) /= 1 or (card(e'Id) = 1 & MU_WD(e'Id) = ""))
        COUNTEREXAMPLE
            errorAttribute("id", "spotElementProjection", e'xmlLineNumber)
        END;
        RULE_FAIL e
            WHEN e : RailML_spotElementProjection & card(e'refersToElement) /= 1
        COUNTEREXAMPLE
            errorAttribute("refersToElement", "spotElementProjection", e'xmlLineNumber)
        END;
        RULE_FAIL e_sep, c
            WHEN e_sep : RailML_spotElementProjection & c = card(e_sep'coordinate) & c /= 1
        COUNTEREXAMPLE
            errorCard("coordinate", {e_sep}, 1, 1, c)
        END;
        RULE_FAIL e_sep, e_coord, c
            WHEN e_sep : RailML_spotElementProjection & e_coord : e_sep'coordinate & c = card(e_coord'x) & c /= 1
        COUNTEREXAMPLE
            errorCard("x", {e_coord}, 1, 1, c)
        END;
        RULE_FAIL e_sep, e_coord, c
            WHEN e_sep : RailML_spotElementProjection & e_coord : e_sep'coordinate & c = card(e_coord'y) & c > 1
        COUNTEREXAMPLE
            errorCard("y", {e_coord}, 0, 1, c)
        END;
        RULE_FAIL e_sep, e_coord, c
            WHEN e_sep : RailML_spotElementProjection & e_coord : e_sep'coordinate & c = card(e_coord'z) & c > 1
        COUNTEREXAMPLE
            errorCard("z", {e_coord}, 0, 1, c)
        END;
        RULE_FORALL e_sep, e_coord
            WHERE e_sep : RailML_spotElementProjection & e_coord : e_sep'coordinate & card(e_coord'x) = 1
            EXPECT STRING_IS_NUMBER(MU_WD(e_coord'x))
        COUNTEREXAMPLE
            errorType("x", "decimal", MU_WD(e_coord'x), e_coord'xmlLineNumber)
        END;
        RULE_FORALL e_sep, e_coord
            WHERE e_sep : RailML_spotElementProjection & e_coord : e_sep'coordinate & card(e_coord'y) = 1
            EXPECT STRING_IS_NUMBER(MU_WD(e_coord'y))
        COUNTEREXAMPLE
            errorType("y", "decimal", MU_WD(e_coord'y), e_coord'xmlLineNumber)
        END;
        RULE_FORALL e_sep, e_coord
            WHERE e_sep : RailML_spotElementProjection & e_coord : e_sep'coordinate & card(e_coord'z) = 1
            EXPECT STRING_IS_NUMBER(MU_WD(e_coord'z))
        COUNTEREXAMPLE
            errorType("z", "decimal", MU_WD(e_coord'z), e_coord'xmlLineNumber)
        END;
        RULE_FORALL e
            WHERE e : RailML_spotElementProjection & card(RailML_infrastructureVisualization) = 1
            EXPECT e'pId = MU_WD(RailML_infrastructureVisualization)'recId
        COUNTEREXAMPLE 
            errorParent("spotElementProjection", "infrastructureVisualization", e'xmlLineNumber)
        END
    END;

    COMPUTATION set_linearElementProjection
    DEPENDS_ON_RULE is_valid_infrastructureVisualization
    BODY
        DEFINE RailML_linearElementProjection
            TYPE FIN(RailML3_VIS_linearElementProjection_Type)
            VALUE dom({e, e_vis | e_vis : elementsOfType("linearElementProjection")
                & e = rec(
                        recId: e_vis'recId, 
                        pId: e_vis'pId,
                        Id: e_vis'attributes[{"id"}],
                        xmlLineNumber: STRING_TO_INT(e_vis'meta("xmlLineNumber")),
                        refersToElement: e_vis'attributes[{"refersToElement"}],
                        coordinates: 
                            dom({ a, c | c : childsOfElementType( "coordinate", e_vis'recId)
                                & a = rec(
                                    recId: c'recId, 
                                    pId: c'pId,
                                    xmlLineNumber: STRING_TO_INT(c'meta("xmlLineNumber")),
                                    x: c'attributes[{"x"}],
                                    y: IF "y" : dom(c'attributes) THEN c'attributes[{"y"}] ELSE {"0.0"} END,
                                    z: IF "z" : dom(c'attributes) THEN c'attributes[{"z"}] ELSE {"0.0"} END
                            )})
                ) })
        END
    END;
    RULE is_valid_linearElementProjection
    DEPENDS_ON_COMPUTATION set_linearElementProjection
    BODY
        RULE_FAIL e
            WHEN e : RailML_linearElementProjection & (card(e'Id) /= 1 or (card(e'Id) = 1 & MU_WD(e'Id) = ""))
        COUNTEREXAMPLE
            errorAttribute("id", "linearElementProjection", e'xmlLineNumber)
        END;
        RULE_FAIL e
            WHEN e : RailML_linearElementProjection & card(e'refersToElement) /= 1
        COUNTEREXAMPLE
            errorAttribute("refersToElement", "linearElementProjection", e'xmlLineNumber)
        END;
        RULE_FAIL e_lep, c
            WHEN e_lep : RailML_linearElementProjection & c = card(e_lep'coordinates) & c < 2
        COUNTEREXAMPLE
            errorCardOnlyLowerBound("coordinate", {e_lep}, 2, c)
        END;
        RULE_FAIL e_lep, e_coord, c
            WHEN e_lep : RailML_linearElementProjection & e_coord : e_lep'coordinates & c = card(e_coord'x) & c /= 1
        COUNTEREXAMPLE
            errorCard("x", {e_coord}, 1, 1, c)
        END;
        RULE_FAIL e_lep, e_coord, c
            WHEN e_lep : RailML_linearElementProjection & e_coord : e_lep'coordinates & c = card(e_coord'y) & c > 1
        COUNTEREXAMPLE
            errorCard("y", {e_coord}, 0, 1, c)
        END;
        RULE_FAIL e_lep, e_coord, c
            WHEN e_lep : RailML_linearElementProjection & e_coord : e_lep'coordinates & c = card(e_coord'z) & c > 1
        COUNTEREXAMPLE
            errorCard("z", {e_coord}, 0, 1, c)
        END;
        RULE_FORALL e_lep, e_coord
            WHERE e_lep : RailML_linearElementProjection & e_coord : e_lep'coordinates & card(e_coord'x) = 1
            EXPECT STRING_IS_NUMBER(MU_WD(e_coord'x))
        COUNTEREXAMPLE
            errorType("x", "decimal", MU_WD(e_coord'x), e_coord'xmlLineNumber)
        END;
        RULE_FORALL e_lep, e_coord
            WHERE e_lep : RailML_linearElementProjection & e_coord : e_lep'coordinates & card(e_coord'y) = 1
            EXPECT STRING_IS_NUMBER(MU_WD(e_coord'y))
        COUNTEREXAMPLE
            errorType("y", "decimal", MU_WD(e_coord'y), e_coord'xmlLineNumber)
        END;
        RULE_FORALL e_lep, e_coord
            WHERE e_lep : RailML_linearElementProjection & e_coord : e_lep'coordinates & card(e_coord'z) = 1
            EXPECT STRING_IS_NUMBER(MU_WD(e_coord'z))
        COUNTEREXAMPLE
            errorType("z", "decimal", MU_WD(e_coord'z), e_coord'xmlLineNumber)
        END;
        RULE_FORALL e
            WHERE e : RailML_linearElementProjection & card(RailML_infrastructureVisualization) = 1
            EXPECT e'pId = MU_WD(RailML_infrastructureVisualization)'recId
        COUNTEREXAMPLE 
            errorParent("linearElementProjection", "infrastructureVisualization", e'xmlLineNumber)
        END
    END;
    
    COMPUTATION set_NET_ELEMENT_COORDINATES
    DEPENDS_ON_RULE is_valid_linearElementProjection
    //DEPENDS_ON_COMPUTATION set_LINEAR_ELEMENT_PROJECTION_IDS
    BODY
        DEFINE RailML3_VIS_NET_ELEMENT_COORDINATES
            TYPE allIdsOfType("netElement") +-> (STRING >+> STRING) // TODO: Update Type
            VALUE { i_ne, s | #e_lep.(i_ne : allIdsOfType("netElement") & e_lep : RailML_linearElementProjection & MU_WD(e_lep'refersToElement) = i_ne & s = { vn1, vn2 | #(e_coord1, e_coord2).(e_coord1 : e_lep'coordinates & e_coord2 : e_lep'coordinates & e_coord1 /= e_coord2 & vn1 = MU_WD(e_lep'refersToElement)^"_"^TO_STRING(e_coord1'recId) & vn2 = MU_WD(e_lep'refersToElement)^"_"^TO_STRING(e_coord2'recId) & e_coord1'recId+1 = e_coord2'recId ) } ) }
        END
    END
END
