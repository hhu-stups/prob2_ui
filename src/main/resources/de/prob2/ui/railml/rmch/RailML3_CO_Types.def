DEFINITIONS
    //-----------------------------------------------------------------------------
    // RailML 3: COMMON
    // descriptions taken from https://wiki3.railml.org/wiki/CO:common
    //-----------------------------------------------------------------------------

    RailML3_CO_generic_Type ==
        struct(
            recId : NATURAL1,
            pId : NATURAL,
            xmlLineNumber : NATURAL1,
            type : RailML3_CO_GENERIC_TYPES
        );

    // root element for railML3 common model
    RailML3_common_Type == 
        struct(
            recId : NATURAL1,
            pId : NATURAL1,
            xmlLineNumber : NATURAL1,

            // attributes:
            Id : FIN(allIdsOfType("common")) // obligatory
        );

    RailML3_CO_name_Type == 
        struct(
            recId : NATURAL1,
            pId : NATURAL1,
            xmlLineNumber : NATURAL1,

            // attributes:
            name : FIN(STRING), // obligatory
            language : FIN(STRING), // obligatory
            // description : FIN(STRING) // optional

            refersTo : STRING // virtual attribute for parent id
        );

    // root element for railML3 common model
    RailML3_CO_common_Type == 
        struct(
            recId : NATURAL1,
            pId : NATURAL1,

            // attributes:
            Id : allIdsOfType("common") // obligatory

            // children:
            // electrificationSystems (0..1), organizationalUnits (0..1), positioning (0..1), projects (0..1), speedProfiles (0..1), timePeriods (0..1)
        );

    RailML3_CO_linearPositioningSystem_Type ==
        struct(
            recId : NATURAL1,
            pId : NATURAL1,

            // attributes:
            Id : FIN(allIdsOfType("linearPositioningSystem")), // obligatory
            linearReferencingMethod : RailML3_CO_LINEAR_REFERENCING_METHOD, // obligatory
            startMeasure: INTEGER, // obligatory
            endMeasure: INTEGER, // obligatory
            units: STRING // obligatory

            // children:
            // anchor (0..*), isValid (1..*), name (0..*)
        );

    RailML3_CO_speedProfile_Type ==
        struct(
            recId : NATURAL1,
            pId : NATURAL1,
            xmlLineNumber : NATURAL1,

            // attributes:
            Id : FIN(allIdsOfType("speedProfile")), // obligatory
            isBasicSpeedProfile : BOOL, // optional; default: TRUE
            mVersion : FIN(NATURAL), // optional
            influence : FIN(RailML3_CO_SPEED_PROFILE_INFLUENCES), // optional
            maxCantDeficiency : FIN(80..300), // optional

            // children:
            braking : FIN(struct(
                    brakeType : FIN(RailML3_CO_SPEED_PROFILE_BRAKE_TYPES), // optional
                    airBrakeApplicationPosition : FIN(RailML3_CO_SPEED_PROFILE_AIR_BRAKE_APPLICATION_POSITIONS), // optional
                    minBrakePercentage : FIN(6..225) // optional
                )),
            load : FIN(struct(exceedsAxleLoad : FIN(REAL), exceedsMeterLoad : FIN(REAL))), // both optional
            tilting : FIN(struct(
                    actuation : FIN(RailML3_CO_SPEED_PROFILE_ACTUATIONS), // optional
                    maxTiltingAngle : FIN(REAL) // optional (0..90)
                )),
            trainType : FIN(struct(type : FIN(RailML3_CO_SPEED_PROFILE_TRAIN_TYPES), etcsTrainCategoryNumber : FIN(0..15))) // both optional
        );