package de.prob2.ui.verifications.modelchecking;

import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import de.prob.check.ModelCheckingOptions;
import de.prob2.ui.verifications.Checked;
import de.prob2.ui.vomanager.IValidationTask;

import javafx.beans.property.BooleanProperty;
import javafx.beans.property.ListProperty;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.ReadOnlyObjectProperty;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.property.SimpleListProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.collections.FXCollections;

// Match property order that was previously generated by Gson
// (to avoid unnecessary reordering when re-saving existing files).
@JsonPropertyOrder({
	"id",
	"nodesLimit",
	"timeLimit",
	"options",
	"goal",
	"shouldExecute",
})
public class ModelCheckingItem implements IValidationTask {
	@JsonIgnore
	private final ObjectProperty<Checked> checked = new SimpleObjectProperty<>(this, "checked", Checked.NOT_CHECKED);

	private final String id;

	private final String nodesLimit;

	private final String timeLimit;

	private final ModelCheckingOptions options;

	private final String goal;
	
	private BooleanProperty shouldExecute;
	
	@JsonIgnore
	private final ListProperty<ModelCheckingJobItem> items = new SimpleListProperty<>(this, "jobItems", FXCollections.observableArrayList());

	@JsonCreator
	public ModelCheckingItem(
		@JsonProperty("id") final String id,
		@JsonProperty("nodesLimit") final String nodesLimit,
		@JsonProperty("timeLimit") final String timeLimit,
		@JsonProperty("goal") final String goal,
		@JsonProperty("options") final ModelCheckingOptions options
	) {
		Objects.requireNonNull(options);
		this.id = id;
		this.nodesLimit = nodesLimit;
		this.timeLimit = timeLimit;
		this.goal = goal;
		this.options = options;
		this.shouldExecute = new SimpleBooleanProperty(true);
		this.initListeners();
	}
	
	private void initListeners() {
		this.itemsProperty().addListener((o, from, to) -> {
			if (to.isEmpty()) {
				this.checked.set(Checked.NOT_CHECKED);
			} else {
				final boolean failed = to.stream()
					.map(ModelCheckingJobItem::getChecked)
					.anyMatch(Checked.FAIL::equals);
				final boolean success = !failed && to.stream()
					.map(ModelCheckingJobItem::getChecked)
					.anyMatch(Checked.SUCCESS::equals);
				
				if (success) {
					this.checked.set(Checked.SUCCESS);
				} else if (failed) {
					this.checked.set(Checked.FAIL);
				} else {
					this.checked.set(Checked.TIMEOUT);
				}
			}
		});
	}
	
	@Override
	public ReadOnlyObjectProperty<Checked> checkedProperty() {
		return this.checked;
	}
	
	@Override
	public Checked getChecked() {
		return this.checkedProperty().get();
	}

	@Override
	public String getId() {
		return this.id;
	}

	public String getNodesLimit() {
		return nodesLimit;
	}

	public String getTimeLimit() {
		return timeLimit;
	}

	public String getGoal() {
		return goal;
	}

	public ModelCheckingOptions getOptions() {
		return this.options;
	}
	
	@Override
	@JsonProperty("shouldExecute")
	public void setSelected(boolean selected) {
		this.shouldExecute.set(selected);
	}
	
	@JsonProperty("shouldExecute")
	@Override
	public boolean selected() {
		return shouldExecute.get();
	}
	
	@Override
	public BooleanProperty selectedProperty() {
		return shouldExecute;
	}
	
	public void reset() {
		this.itemsProperty().clear();
	}
	
	public ListProperty<ModelCheckingJobItem> itemsProperty() {
		return items;
	}
	
	public List<ModelCheckingJobItem> getItems() {
		return items.get();
	}

	public boolean settingsEqual(final ModelCheckingItem other) {
		return Objects.equals(this.getId(), other.getId())
			&& this.getNodesLimit().equals(other.getNodesLimit())
			&& this.getTimeLimit().equals(other.getTimeLimit())
			&& this.getGoal().equals(other.getGoal())
			&& this.getOptions().equals(other.getOptions());
	}
	
	@Override
	public String toString() {
		return String.format("%s(%s,%s,%s)", this.getClass().getSimpleName(), this.getNodesLimit(), this.getTimeLimit(), this.getGoal(), this.getOptions());
	}
}
