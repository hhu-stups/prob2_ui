package de.prob2.ui.project.machines;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.google.common.io.MoreFiles;

import de.prob.ltl.parser.pattern.PatternManager;
import de.prob.model.eventb.EventBModel;
import de.prob.model.representation.AbstractModel;
import de.prob.scripting.FactoryProvider;
import de.prob.scripting.ModelFactory;
import de.prob2.ui.animation.symbolic.SymbolicAnimationItem;
import de.prob2.ui.animation.symbolic.testcasegeneration.TestCaseGenerationItem;
import de.prob2.ui.animation.tracereplay.ReplayTrace;
import de.prob2.ui.dynamic.DynamicCommandFormulaItem;
import de.prob2.ui.internal.CachedEditorState;
import de.prob2.ui.project.preferences.Preference;
import de.prob2.ui.simulation.model.SimulationModel;
import de.prob2.ui.simulation.table.SimulationItem;
import de.prob2.ui.verifications.Checked;
import de.prob2.ui.verifications.IExecutableItem;
import de.prob2.ui.verifications.temporal.TemporalFormulaItem;
import de.prob2.ui.verifications.temporal.ltl.patterns.LTLPatternItem;
import de.prob2.ui.verifications.modelchecking.ModelCheckingItem;
import de.prob2.ui.verifications.po.ProofObligationItem;
import de.prob2.ui.verifications.po.SavedProofObligationItem;
import de.prob2.ui.verifications.symbolicchecking.SymbolicCheckingFormulaItem;
import de.prob2.ui.vomanager.IValidationTask;

import javafx.application.Platform;
import javafx.beans.InvalidationListener;
import javafx.beans.property.BooleanProperty;
import javafx.beans.property.ListProperty;
import javafx.beans.property.MapProperty;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.ReadOnlyListProperty;
import javafx.beans.property.ReadOnlyMapProperty;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.property.SimpleListProperty;
import javafx.beans.property.SimpleMapProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import javafx.collections.ObservableMap;

import static de.prob2.ui.project.machines.MachineCheckingStatus.combineMachineCheckingStatus;

// Match property order that was previously generated by Gson
// (to avoid unnecessary reordering when re-saving existing files).
@JsonPropertyOrder({
	"name",
	"description",
	"location",
	"lastUsedPreferenceName",
	"machineProperties"
})
public class Machine {
	private final StringProperty name;
	private final StringProperty description;
	private final Path location;
	private final StringProperty lastUsedPreferenceName;
	private final MachineProperties machineProperties;

	@JsonIgnore
	private final CachedEditorState cachedEditorState;
	@JsonIgnore
	private final BooleanProperty changed = new SimpleBooleanProperty(false);

	// When deserializing from JSON,
	// all fields that are not listed as constructor parameters
	// are instead filled in using setters after the Machine object is constructed.
	@JsonCreator
	public Machine(
		@JsonProperty("name") final String name,
		@JsonProperty("description") final String description,
		@JsonProperty("location") final Path location
	) {
		this.name = new SimpleStringProperty(this, "name", name);
		this.description = new SimpleStringProperty(this, "description", description);
		this.location = location;
		this.lastUsedPreferenceName = new SimpleStringProperty(this, "lastUsedPreferenceName", Preference.DEFAULT.getName());
		this.cachedEditorState = new CachedEditorState();

		this.machineProperties = new MachineProperties();

		this.initListeners();
	}

	private void initListeners() {
		final InvalidationListener changedListener = o -> this.setChanged(true);
		this.nameProperty().addListener(changedListener);
		this.descriptionProperty().addListener(changedListener);
		this.lastUsedPreferenceNameProperty().addListener(changedListener);
	}
	

	@JsonIgnore
	public Checked getChecked() {
		return null;
	}

	public ObjectProperty<Checked> checkedProperty() {
		return null;
	}
	
	@JsonIgnore
	public Class<? extends ModelFactory<?>> getModelFactoryClass() {
		return FactoryProvider.factoryClassFromExtension(MoreFiles.getFileExtension(this.getLocation()));
	}
	
	public StringProperty lastUsedPreferenceNameProperty() {
		return this.lastUsedPreferenceName;
	}
	
	public String getLastUsedPreferenceName() {
		return this.lastUsedPreferenceNameProperty().get();
	}
	
	public void setLastUsedPreferenceName(final String lastUsedPreferenceName) {
		this.lastUsedPreferenceNameProperty().set(lastUsedPreferenceName);
	}

	public MachineProperties getMachineProperties() {
		return machineProperties;
	}

	public StringProperty nameProperty() {
		return this.name;
	}

	public String getName() {
		return this.nameProperty().get();
	}
	
	public void setName(final String name) {
		this.nameProperty().set(name);
	}
	
	public StringProperty descriptionProperty() {
		return this.description;
	}

	public String getDescription() {
		return this.descriptionProperty().get();
	}
	
	public void setDescription(final String description) {
		this.descriptionProperty().set(description);
	}


	public Path getLocation() {
		return this.location;
	}

	public CachedEditorState getCachedEditorState() {
		return cachedEditorState;
	}

	public BooleanProperty changedProperty() {
		return changed;
	}

	public boolean isChanged() {
		return this.changedProperty().get();
	}

	public void setChanged(final boolean changed) {
		this.changedProperty().set(changed);
	}

	@Override
	public boolean equals(Object other) {
		if (other == this) {
			return true;
		}
		if (!(other instanceof Machine otherMachine)) {
			return false;
		}
		return this.getLocation().equals(otherMachine.getLocation());
	}

	@Override
	public int hashCode() {
		return Objects.hash(this.getLocation());
	}

	@Override
	public String toString() {
		return this.getName();
	}
}
