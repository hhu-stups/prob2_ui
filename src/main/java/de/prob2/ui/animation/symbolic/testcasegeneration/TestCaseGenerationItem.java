package de.prob2.ui.animation.symbolic.testcasegeneration;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;

import de.prob.statespace.Trace;
import de.prob2.ui.verifications.AbstractCheckableItem;

import javafx.beans.property.ListProperty;
import javafx.beans.property.SimpleListProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

// Match property order that was previously generated by Gson
// (to avoid unnecessary reordering when re-saving existing files).
@JsonPropertyOrder({
	"maxDepth",
	"additionalInformation",
	"type",
	"name",
	"code",
	"selected",
})
public class TestCaseGenerationItem extends AbstractCheckableItem {
	@JsonSubTypes({
		// The names here *must* match the names of the corresponding TestCaseGenerationType enum constants,
		// because we ask Jackson to select the AdditionalInformation subclass based on the type field of TestCaseGenerationItem.
		@JsonSubTypes.Type(value = McdcInformation.class, name = "MCDC"),
		@JsonSubTypes.Type(value = CoveredOperationsInformation.class, name = "COVERED_OPERATIONS"),
	})
	private abstract static class AdditionalInformation {}
	
	private static final class McdcInformation extends AdditionalInformation {
		private final int level;
		
		@JsonCreator
		private McdcInformation(
			@JsonProperty("level") final int level
		) {
			this.level = level;
		}
		
		@JsonProperty
		private int getLevel() {
			return this.level;
		}
	}
	
	private static final class CoveredOperationsInformation extends AdditionalInformation {
		private final List<String> operations;
		
		@JsonCreator
		private CoveredOperationsInformation(
			@JsonProperty("operations") final List<String> operations
		) {
			this.operations = new ArrayList<>(operations);
		}
		
		@JsonProperty
		private List<String> getOperations() {
			return Collections.unmodifiableList(this.operations);
		}
	}
	
	private final int maxDepth;
	
	@JsonIgnore
	private final ListProperty<Trace> examples = new SimpleListProperty<>(this, "examples", FXCollections.observableArrayList());
	@JsonIgnore
	private final ObservableList<TraceInformationItem> traceInformation = FXCollections.observableArrayList();
	@JsonIgnore
	private final ObservableList<TraceInformationItem> uncoveredOperations = FXCollections.observableArrayList();
	
	// Make Jackson select the AdditionalInformation subclass based on the type field.
	@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = "type")
	private final AdditionalInformation additionalInformation;
	
	private final TestCaseGenerationType type;
	
	
	public TestCaseGenerationItem(int maxDepth, int level) {
		super(getMcdcName(maxDepth, level), "");
		this.type = TestCaseGenerationType.MCDC;
		this.maxDepth = maxDepth;
		this.additionalInformation = new McdcInformation(level);
	}

	public TestCaseGenerationItem(int maxDepth, List<String> operations) {
		super(getCoveredOperationsName(maxDepth, operations), "");
		this.type = TestCaseGenerationType.COVERED_OPERATIONS;
		this.maxDepth = maxDepth;
		this.additionalInformation = new CoveredOperationsInformation(operations);
	}
	
	@JsonCreator
	private TestCaseGenerationItem(
		@JsonProperty("name") final String name,
		@JsonProperty("code") final String code,
		@JsonProperty("type") final TestCaseGenerationType type,
		@JsonProperty("maxDepth") final int maxDepth,
		@JsonProperty("additionalInformation") final AdditionalInformation additionalInformation
	) {
		super(name, code);
		
		this.type = type;
		this.maxDepth = maxDepth;
		this.additionalInformation = additionalInformation;
	}
	
	private static String getMcdcName(final int maxDepth, final int level) {
		return "MCDC:" + level + "/" + "DEPTH:" + maxDepth;
	}
	
	private static String getCoveredOperationsName(final int maxDepth, final List<String> operations) {
		return "OPERATION:" + String.join(",", operations) + "/" + "DEPTH:" + maxDepth;
	}
	
	@Override
	public void reset() {
		super.reset();
		this.examples.clear();
		this.getTraceInformation().clear();
		this.getUncoveredOperations().clear();
	}
	
	@JsonIgnore
	public int getMcdcLevel() {
		return ((McdcInformation)this.additionalInformation).getLevel();
	}
	
	@JsonIgnore
	public List<String> getCoverageOperations() {
		return ((CoveredOperationsInformation)this.additionalInformation).getOperations();
	}
	
	public TestCaseGenerationType getType() {
		return type;
	}

	public int getMaxDepth() {
		return maxDepth;
	}
	
	public ListProperty<Trace> examplesProperty() {
		return examples;
	}
	
	public ObservableList<Trace> getExamples() {
		return examples.get();
	}
	
	public ObservableList<TraceInformationItem> getTraceInformation() {
		return this.traceInformation;
	}
	
	public ObservableList<TraceInformationItem> getUncoveredOperations() {
		return this.uncoveredOperations;
	}
	
	public boolean settingsEqual(final TestCaseGenerationItem other) {
		return this.getName().equals(other.getName())
			&& this.getCode().equals(other.getCode())
			&& this.getType().equals(other.getType());
	}

	public String createdByForMetadata(int index) {
		return "Test Case Generation: " + getName() + "; " + getTraceInformation().get(index);
	}
}
